{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1a76bcbb-849b-41d0-9e6d-bad726c49013",
   "metadata": {},
   "source": [
    "## Tarea1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b3c3b9b-cff3-401c-87c6-d7dfe85811bf",
   "metadata": {},
   "source": [
    "1. Crear  un  programa  que  lee  un  archivo  de  texto  y  retorna  el  número  de  palabras  de este. Usar dog_breeds.txt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5e283dd4-9a8b-497a-bdf1-7685df18766c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pug\n",
      "Jack Russell Terrier\n",
      "English Springer Spaniel\n",
      "German Shepherd\n",
      "Staffordshire Bull Terrier\n",
      "Cavalier King Charles Spaniel\n",
      "Golden Retriever\n",
      "West Highland White Terrier\n",
      "Boxer\n",
      "Border Terrier\n",
      "Beagle\n",
      "Salchicha\n",
      "\n",
      "27\n",
      "27\n"
     ]
    }
   ],
   "source": [
    "with open(\"dog_breeds.txt\",\"r\") as lectura_file:\n",
    "            contenido=lectura_file.read()\n",
    "#Primero separamos el numero de palabras\n",
    "palabras=contenido.split()\n",
    "print(contenido)\n",
    "#Opc 1 Len para contar el numero de elementos de la lista\n",
    "print(len(palabras))\n",
    "\n",
    "#Opc 2 For que recorra la lista y cuente la cantidad de elementos.\n",
    "count = 0\n",
    "for i in palabras:\n",
    "    count+=1\n",
    "print(count)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f580c721-6167-4b99-aee3-792d9838a797",
   "metadata": {},
   "source": [
    "2.Utilizar sqlalchemy y sqlite y realizar lo siguiente: a.Usar sqlite en memoria. b.Crear  tabla  empleado  con  datos  personales  -  mínimo  nombre,  apellidos,  edad,  DNI. c.Insertar datos. d.Hacer un select de todo. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "65be4b3a-bc8f-4438-924a-476edbb6586c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: sqlalchemy in c:\\users\\opera\\documents\\test2\\test2_env\\lib\\site-packages (2.0.27)"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "[notice] A new release of pip is available: 23.3.1 -> 24.0\n",
      "[notice] To update, run: python.exe -m pip install --upgrade pip\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Requirement already satisfied: typing-extensions>=4.6.0 in c:\\users\\opera\\documents\\test2\\test2_env\\lib\\site-packages (from sqlalchemy) (4.9.0)\n",
      "Requirement already satisfied: greenlet!=0.4.17 in c:\\users\\opera\\documents\\test2\\test2_env\\lib\\site-packages (from sqlalchemy) (3.0.3)\n"
     ]
    }
   ],
   "source": [
    "!pip install sqlalchemy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "005d3011-c3a8-4297-9403-0ab1a301d19b",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sqlalchemy import create_engine, Column, Integer, String, ForeignKey\n",
    "from sqlalchemy.orm import sessionmaker, relationship, declarative_base"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "75b80aad-010a-4b7d-80c4-730c7082271d",
   "metadata": {},
   "outputs": [],
   "source": [
    "engine = create_engine('sqlite:///empleado.db', echo=False)  # 'empleado.db' es el nombre de \n",
    "\n",
    "Session = sessionmaker(bind=engine)\n",
    "session = Session()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "a3868a97-dd76-45f2-8a88-14e6928fcbde",
   "metadata": {},
   "outputs": [],
   "source": [
    "Base = declarative_base()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "d1e9f376-559d-4aaf-b715-eb00a4b12270",
   "metadata": {},
   "outputs": [],
   "source": [
    "class User(Base):\n",
    "    __tablename__ = 'employees'\n",
    "    user_id = Column(Integer, primary_key=True)\n",
    "    name = Column(String)\n",
    "    lastname=Column(String)\n",
    "    age= Column(Integer)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "e38b84ae-ced7-4349-bf23-92c75e2e9106",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Paso 5: Crea las tablas en la base de datos\n",
    "Base.metadata.create_all(engine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "2548df09-919d-48a1-a925-31fd7410e532",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Paso 6: Define funciones para crear, actualizar, borrar y leer datos\n",
    "def create_user(user_id, name, lastname, age):\n",
    "    new_user = User(user_id=user_id, name=name, lastname=lastname, age=age)\n",
    "    session.add(new_user)\n",
    "    session.commit()\n",
    "\n",
    "def read_users():\n",
    "    users = session.query(User).all()\n",
    "    return users\n",
    "\n",
    "def update_user(user_id, new_username):\n",
    "    user = session.query(User).filter_by(id=user_id).first()\n",
    "    user.username = new_username\n",
    "    session.commit()\n",
    "\n",
    "def delete_user(user_id):\n",
    "    user = session.query(User).filter_by(id=user_id).first()\n",
    "    session.delete(user)\n",
    "    session.commit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "6575e4ab-3ce2-466c-bc48-c47cf2a3d66d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Paso 7: Ejecuta las funciones\n",
    "create_user(72638566,\"Jorge\",\"Mendoza\", 56)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e87983c8-a772-4080-8144-f0cb7b64b1cb",
   "metadata": {},
   "source": [
    "3.Convertir JSON a CSV. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "2f75462f-382e-4f2c-825f-ecfe8b1fce1a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "El archivo 'jsonplaceholder.json' ha sido creado con exito.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\opera\\AppData\\Local\\Temp\\ipykernel_22136\\3980289736.py:16: FutureWarning: Passing literal json to 'read_json' is deprecated and will be removed in a future version. To read from a literal string, wrap it in a 'StringIO' object.\n",
      "  df = pd.read_json(json_data)\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "import pandas\n",
    "import requests\n",
    "response=requests.get(\"https://jsonplaceholder.typicode.com/todos\")\n",
    "todos=json.loads(response.text)\n",
    "data= json.dumps(todos, indent=4)\n",
    "nombre_archivo='jsonplaceholder.json'\n",
    "with open(nombre_archivo,\"w\") as archivo_json:\n",
    "    json.dump(data, archivo_json,indent=4)\n",
    "\n",
    "# Reading JSON data from a file\n",
    "with open(\"jsonplaceholder.json\") as f:\n",
    "    json_data = json.load(f)\n",
    "\n",
    "# Converting JSON data to a pandas DataFrame\n",
    "df = pd.read_json(json_data)\n",
    "\n",
    "# Writing DataFrame to a CSV file\n",
    "df.to_csv(\"jsonplaceholder.csv\", index=False)\n",
    "\n",
    "print(f\"El archivo '{nombre_archivo}' ha sido creado con exito.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "df10685f-1ed7-43ab-b5ee-cfc283a66f40",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6905a71c-cbc8-4a99-bffb-84997f652e80",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
